{
  message: 'Server listening on port 3001',
  level: 'info',
  timestamp: '2023-11-19T06:00:02.712Z'
}
{
  message: 'Connected to database neondb on port 5432 at ep-muddy-frog-18780884-pooler.ap-southeast-1.aws.neon.tech',
  level: 'info',
  timestamp: '2023-11-19T06:00:04.729Z'
}
{
  module: 'verify-jwt-token',
  service: 'verifyJWT',
  level: 'error',
  message: 'Access token invalid',
  timestamp: '2023-11-19T06:00:06.149Z'
}
{
  message: 'Server listening on port 3001',
  level: 'info',
  timestamp: '2023-11-19T06:00:35.312Z'
}
{
  message: 'Connected to database neondb on port 5432 at ep-muddy-frog-18780884-pooler.ap-southeast-1.aws.neon.tech',
  level: 'info',
  timestamp: '2023-11-19T06:00:36.188Z'
}
{
  message: 'Server listening on port 3001',
  level: 'info',
  timestamp: '2023-11-19T06:00:41.928Z'
}
{
  message: 'Connected to database neondb on port 5432 at ep-muddy-frog-18780884-pooler.ap-southeast-1.aws.neon.tech',
  level: 'info',
  timestamp: '2023-11-19T06:00:42.799Z'
}
{
  module: 'auth-controller',
  service: 'login',
  request: { email: 'normal.user@abcgroup.com' },
  level: 'info',
  message: 'Creating user object',
  timestamp: '2023-11-19T06:00:46.318Z'
}
{
  module: 'user',
  service: 'User constructor',
  level: 'info',
  message: 'User object created',
  timestamp: '2023-11-19T06:00:46.319Z'
}
{
  module: 'auth-controller',
  service: 'login',
  request: { email: 'normal.user@abcgroup.com' },
  level: 'info',
  message: 'Successfully created user object',
  timestamp: '2023-11-19T06:00:46.320Z'
}
{
  module: 'auth-controller',
  service: 'login',
  request: { email: 'normal.user@abcgroup.com' },
  level: 'info',
  message: 'Finding user with same email',
  timestamp: '2023-11-19T06:00:46.320Z'
}
{
  module: 'user',
  service: 'findOne',
  request: { email: 'normal.user@abcgroup.com' },
  level: 'info',
  message: 'Successfully got user by email',
  timestamp: '2023-11-19T06:00:46.994Z'
}
{
  module: 'auth-controller',
  service: 'login',
  request: { email: 'normal.user@abcgroup.com' },
  level: 'info',
  message: 'Successfully found user with same email',
  timestamp: '2023-11-19T06:00:46.994Z'
}
{
  module: 'auth-controller',
  service: 'login',
  request: { email: 'normal.user@abcgroup.com' },
  level: 'info',
  message: 'Checking if password is correct',
  timestamp: '2023-11-19T06:00:46.994Z'
}
{
  module: 'user',
  service: 'hasSamePassword',
  userId: '',
  level: 'info',
  message: 'Comparing passwords',
  timestamp: '2023-11-19T06:00:46.995Z'
}
{
  module: 'auth-controller',
  service: 'login',
  request: { email: 'normal.user@abcgroup.com' },
  level: 'info',
  message: 'Successfully checked if password is correct',
  timestamp: '2023-11-19T06:00:47.078Z'
}
{
  module: 'auth-controller',
  service: 'login',
  userId: 'E00001',
  level: 'info',
  message: 'Creating access and refresh tokens',
  timestamp: '2023-11-19T06:00:47.079Z'
}
{
  module: 'create-jwt-token',
  service: 'createAccessToken',
  userId: 'E00001',
  level: 'info',
  message: 'Creating access token',
  timestamp: '2023-11-19T06:00:47.079Z'
}
{
  module: 'create-jwt-token',
  service: 'createRefreshToken',
  userId: 'E00001',
  level: 'info',
  message: 'Creating refresh token',
  timestamp: '2023-11-19T06:00:47.082Z'
}
{
  module: 'auth-controller',
  service: 'login',
  userId: 'E00001',
  level: 'info',
  message: 'Successfully created access and refresh tokens',
  timestamp: '2023-11-19T06:00:47.084Z'
}
{
  module: 'auth-controller',
  service: 'login',
  userId: 'E00001',
  level: 'info',
  message: 'Replacing refresh tokens',
  timestamp: '2023-11-19T06:00:47.084Z'
}
{
  module: 'user',
  service: 'replaceRefreshTokens',
  userId: 'E00001',
  level: 'info',
  message: 'Successfully replaced refresh tokens',
  timestamp: '2023-11-19T06:00:47.146Z'
}
{
  module: 'auth-controller',
  service: 'login',
  userId: 'E00001',
  level: 'info',
  message: 'Successfully replaced refresh tokens',
  timestamp: '2023-11-19T06:00:47.147Z'
}
{
  module: 'auth-controller',
  service: 'login',
  userId: 'E00001',
  level: 'info',
  message: 'Setting cookie',
  timestamp: '2023-11-19T06:00:47.147Z'
}
{
  module: 'auth-controller',
  service: 'login',
  userId: 'E00001',
  level: 'info',
  message: 'Successfully logged in user',
  timestamp: '2023-11-19T06:00:47.148Z'
}
{
  module: 'verify-jwt-token',
  service: 'verifyJWT',
  userId: 'E00001',
  level: 'info',
  message: 'Access token verified',
  timestamp: '2023-11-19T06:01:20.855Z'
}
{
  module: 'check-auth',
  service: 'checkAuthStatus',
  userId: 'E00001',
  level: 'info',
  message: 'User authenticated',
  timestamp: '2023-11-19T06:01:20.856Z'
}
{
  module: 'user-all-booking-controller',
  userId: 'E00001',
  service: 'bookAll',
  request: {
    dates: [ '2023-12-29', '2023-12-30' ],
    isDeskRequired: true,
    isCabRequired: true,
    isFoodRequired: true
  },
  level: 'info',
  message: 'Formatting dates and checking buffer',
  timestamp: '2023-11-19T06:01:20.860Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2023-12-29', '2023-12-30' ] },
  level: 'info',
  message: 'Getting desk bookings for user for dates',
  timestamp: '2023-11-19T06:01:20.862Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingsForUserForDates',
  userId: 'E00001',
  request: { dates: [ '2023-12-29', '2023-12-30' ] },
  level: 'info',
  message: 'Successfully got all desk bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:01:23.760Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  level: 'error',
  message: 'Desk bookings is undefined',
  timestamp: '2023-11-19T06:01:23.760Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E00001',
  request: { dates: [ '2023-12-29', '2023-12-30' ] },
  level: 'info',
  message: 'Successfully formatted all desk bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:01:23.761Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E00001',
  request: { dates: [ '2023-12-29', '2023-12-30' ] },
  level: 'info',
  message: 'Successfully returned all desk bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:01:23.761Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2023-12-29', '2023-12-30' ] },
  level: 'info',
  message: 'Successfully got desk bookings for user for dates',
  timestamp: '2023-11-19T06:01:23.761Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { deskId: [ 'A1', 'B1' ], dates: [ '2023-12-29', '2023-12-30' ] },
  level: 'info',
  message: 'Getting desk bookings by desk id and dates',
  timestamp: '2023-11-19T06:01:23.761Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'A1', dates: [ '2023-12-29' ] },
  level: 'info',
  message: 'Successfully got all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:01:23.821Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'A1', dates: [ '2023-12-29' ] },
  level: 'info',
  message: 'Successfully returned all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:01:23.822Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'B1', dates: [ '2023-12-30' ] },
  level: 'info',
  message: 'Successfully got all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:01:23.882Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'B1', dates: [ '2023-12-30' ] },
  level: 'info',
  message: 'Successfully returned all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:01:23.882Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { deskId: [ 'A1', 'B1' ], dates: [ '2023-12-29', '2023-12-30' ] },
  level: 'info',
  message: 'Successfully got desk bookings by desk id and dates',
  timestamp: '2023-11-19T06:01:23.882Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2023-12-29', '2023-12-30' ] },
  level: 'info',
  message: 'Getting cab bookings for user for dates',
  timestamp: '2023-11-19T06:01:23.882Z'
}
{
  module: 'cab-booking',
  service: 'getCabBookingsForUserForDates',
  userId: 'E00001',
  request: { dates: [ '2023-12-29', '2023-12-30' ] },
  level: 'info',
  message: 'Successfully got cab bookings for user for dates',
  timestamp: '2023-11-19T06:01:24.006Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  level: 'error',
  message: 'Cab bookings not found',
  timestamp: '2023-11-19T06:01:24.007Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  userId: 'E00001',
  request: { dates: [ '2023-12-29', '2023-12-30' ] },
  level: 'info',
  message: 'Successfully formatted cab bookings for user for dates',
  timestamp: '2023-11-19T06:01:24.007Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  userId: 'E00001',
  request: { dates: [ '2023-12-29', '2023-12-30' ] },
  level: 'info',
  message: 'Successfully returned cab bookings for user for dates',
  timestamp: '2023-11-19T06:01:24.008Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2023-12-29', '2023-12-30' ] },
  level: 'info',
  message: 'Successfully got cab bookings for user for dates',
  timestamp: '2023-11-19T06:01:24.008Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2023-12-29', '2023-12-30' ] },
  level: 'info',
  message: 'Getting food bookings for user for dates',
  timestamp: '2023-11-19T06:01:24.008Z'
}
{
  module: 'food-booking',
  service: 'getFoodBookingsForUserForDates',
  userId: 'E00001',
  request: { dates: [ '2023-12-29', '2023-12-30' ] },
  level: 'info',
  message: 'Successfully got all food bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:01:24.133Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  level: 'error',
  message: 'foodBookings is undefined',
  timestamp: '2023-11-19T06:01:24.133Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E00001',
  request: { dates: [ '2023-12-29', '2023-12-30' ] },
  level: 'info',
  message: 'Successfully formatted all food bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:01:24.134Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E00001',
  request: { dates: [ '2023-12-29', '2023-12-30' ] },
  level: 'info',
  message: 'Successfully returned all food bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:01:24.134Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2023-12-29', '2023-12-30' ] },
  level: 'info',
  message: 'Successfully got food bookings for user for dates',
  timestamp: '2023-11-19T06:01:24.134Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { deskId: [ 'A1', 'B1' ], dates: [ '2023-12-29', '2023-12-30' ] },
  level: 'info',
  message: 'Booking desk for user',
  timestamp: '2023-11-19T06:01:24.134Z'
}
{
  module: 'desk-booking',
  service: 'bookDesk',
  userId: 'E00001',
  request: { deskId: 'A1', dates: [ '2023-12-29' ] },
  level: 'info',
  message: 'Successfully booked a desk',
  timestamp: '2023-11-19T06:01:24.204Z'
}
{
  module: 'desk-booking',
  service: 'bookDesk',
  bookingId: '65c064a0-5236-40b5-8985-40bb2cdcee94',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:01:24.205Z'
}
{
  module: 'desk-booking',
  service: 'bookDesk',
  userId: 'E00001',
  request: { deskId: 'B1', dates: [ '2023-12-30' ] },
  level: 'info',
  message: 'Successfully booked a desk',
  timestamp: '2023-11-19T06:01:24.266Z'
}
{
  module: 'desk-booking',
  service: 'bookDesk',
  bookingId: '7869bef1-cce7-451c-8c6c-6f090e3eda6e',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:01:24.267Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { deskId: [ 'A1', 'B1' ], dates: [ '2023-12-29', '2023-12-30' ] },
  level: 'info',
  message: 'Successfully booked desk for user',
  timestamp: '2023-11-19T06:01:24.267Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: {
    dates: [ '2023-12-29', '2023-12-30' ],
    workSlot: [ '9AM-5PM', '6AM-3PM' ]
  },
  level: 'info',
  message: 'Booking cab for user',
  timestamp: '2023-11-19T06:01:24.267Z'
}
{
  module: 'cab-booking',
  service: 'bookCab',
  userId: 'E00001',
  request: { dates: [ '2023-12-29' ], workSlot: '9AM-5PM' },
  level: 'info',
  message: 'Successfully booked cab',
  timestamp: '2023-11-19T06:01:24.338Z'
}
{
  module: 'cab-booking',
  service: 'bookCab',
  userId: 'E00001',
  request: { dates: [ '2023-12-29' ], workSlot: '9AM-5PM' },
  bookingId: 'a3a28d6c-dcbf-44ed-a058-a4a517ee7164',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:01:24.338Z'
}
{
  module: 'cab-booking',
  service: 'bookCab',
  userId: 'E00001',
  request: { dates: [ '2023-12-30' ], workSlot: '6AM-3PM' },
  level: 'info',
  message: 'Successfully booked cab',
  timestamp: '2023-11-19T06:01:24.399Z'
}
{
  module: 'cab-booking',
  service: 'bookCab',
  userId: 'E00001',
  request: { dates: [ '2023-12-30' ], workSlot: '6AM-3PM' },
  bookingId: '1488963e-2847-4547-afb4-2f1714da6a39',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:01:24.400Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: {
    dates: [ '2023-12-29', '2023-12-30' ],
    workSlot: [ '9AM-5PM', '6AM-3PM' ]
  },
  level: 'info',
  message: 'Successfully booked cab for user',
  timestamp: '2023-11-19T06:01:24.400Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: {
    dates: [ '2023-12-29', '2023-12-30' ],
    preference: [ 'None', 'Veg' ]
  },
  level: 'info',
  message: 'Booking food for user',
  timestamp: '2023-11-19T06:01:24.401Z'
}
{
  module: 'food-booking',
  service: 'bookFood',
  userId: 'E00001',
  request: { dates: [ '2023-12-30' ], preference: 'Veg' },
  level: 'info',
  message: 'Successfully booked food for multiple dates',
  timestamp: '2023-11-19T06:01:24.469Z'
}
{
  module: 'food-booking',
  service: 'bookFood',
  userId: 'E00001',
  request: { dates: [ '2023-12-30' ], preference: 'Veg' },
  bookingId: '2f60cd41-3e22-474e-a661-7a2ac39b7267',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:01:24.470Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: {
    dates: [ '2023-12-29', '2023-12-30' ],
    preference: [ 'None', 'Veg' ]
  },
  level: 'info',
  message: 'Successfully booked food for user',
  timestamp: '2023-11-19T06:01:24.470Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2023-12-29', '2023-12-30' ] },
  level: 'info',
  message: 'Booking successfull',
  timestamp: '2023-11-19T06:01:24.471Z'
}
{
  module: 'verify-jwt-token',
  service: 'verifyJWT',
  userId: 'E00001',
  level: 'info',
  message: 'Access token verified',
  timestamp: '2023-11-19T06:07:31.542Z'
}
{
  module: 'check-auth',
  service: 'checkAuthStatus',
  userId: 'E00001',
  level: 'info',
  message: 'User authenticated',
  timestamp: '2023-11-19T06:07:31.543Z'
}
{
  module: 'user-all-booking-controller',
  userId: 'E00001',
  service: 'bookAll',
  request: {
    dates: [ '2024-12-29', '2024-12-30' ],
    isDeskRequired: true,
    isCabRequired: true,
    isFoodRequired: true
  },
  level: 'info',
  message: 'Formatting dates and checking buffer',
  timestamp: '2023-11-19T06:07:31.543Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2024-12-29', '2024-12-30' ] },
  level: 'info',
  message: 'Getting desk bookings for user for dates',
  timestamp: '2023-11-19T06:07:31.544Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingsForUserForDates',
  userId: 'E00001',
  request: { dates: [ '2024-12-29', '2024-12-30' ] },
  level: 'info',
  message: 'Successfully got all desk bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:07:33.148Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  level: 'error',
  message: 'Desk bookings is undefined',
  timestamp: '2023-11-19T06:07:33.148Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E00001',
  request: { dates: [ '2024-12-29', '2024-12-30' ] },
  level: 'info',
  message: 'Successfully formatted all desk bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:07:33.148Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E00001',
  request: { dates: [ '2024-12-29', '2024-12-30' ] },
  level: 'info',
  message: 'Successfully returned all desk bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:07:33.149Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2024-12-29', '2024-12-30' ] },
  level: 'info',
  message: 'Successfully got desk bookings for user for dates',
  timestamp: '2023-11-19T06:07:33.149Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { deskId: [ 'A1', 'B1' ], dates: [ '2024-12-29', '2024-12-30' ] },
  level: 'info',
  message: 'Getting desk bookings by desk id and dates',
  timestamp: '2023-11-19T06:07:33.149Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'A1', dates: [ '2024-12-29' ] },
  level: 'info',
  message: 'Successfully got all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:07:33.205Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'A1', dates: [ '2024-12-29' ] },
  level: 'info',
  message: 'Successfully returned all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:07:33.205Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'B1', dates: [ '2024-12-30' ] },
  level: 'info',
  message: 'Successfully got all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:07:33.264Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'B1', dates: [ '2024-12-30' ] },
  level: 'info',
  message: 'Successfully returned all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:07:33.264Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { deskId: [ 'A1', 'B1' ], dates: [ '2024-12-29', '2024-12-30' ] },
  level: 'info',
  message: 'Successfully got desk bookings by desk id and dates',
  timestamp: '2023-11-19T06:07:33.265Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2024-12-29', '2024-12-30' ] },
  level: 'info',
  message: 'Getting cab bookings for user for dates',
  timestamp: '2023-11-19T06:07:33.265Z'
}
{
  module: 'cab-booking',
  service: 'getCabBookingsForUserForDates',
  userId: 'E00001',
  request: { dates: [ '2024-12-29', '2024-12-30' ] },
  level: 'info',
  message: 'Successfully got cab bookings for user for dates',
  timestamp: '2023-11-19T06:07:33.380Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  level: 'error',
  message: 'Cab bookings not found',
  timestamp: '2023-11-19T06:07:33.380Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  userId: 'E00001',
  request: { dates: [ '2024-12-29', '2024-12-30' ] },
  level: 'info',
  message: 'Successfully formatted cab bookings for user for dates',
  timestamp: '2023-11-19T06:07:33.381Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  userId: 'E00001',
  request: { dates: [ '2024-12-29', '2024-12-30' ] },
  level: 'info',
  message: 'Successfully returned cab bookings for user for dates',
  timestamp: '2023-11-19T06:07:33.381Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2024-12-29', '2024-12-30' ] },
  level: 'info',
  message: 'Successfully got cab bookings for user for dates',
  timestamp: '2023-11-19T06:07:33.381Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2024-12-29', '2024-12-30' ] },
  level: 'info',
  message: 'Getting food bookings for user for dates',
  timestamp: '2023-11-19T06:07:33.381Z'
}
{
  module: 'food-booking',
  service: 'getFoodBookingsForUserForDates',
  userId: 'E00001',
  request: { dates: [ '2024-12-29', '2024-12-30' ] },
  level: 'info',
  message: 'Successfully got all food bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:07:33.495Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  level: 'error',
  message: 'foodBookings is undefined',
  timestamp: '2023-11-19T06:07:33.496Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E00001',
  request: { dates: [ '2024-12-29', '2024-12-30' ] },
  level: 'info',
  message: 'Successfully formatted all food bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:07:33.497Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E00001',
  request: { dates: [ '2024-12-29', '2024-12-30' ] },
  level: 'info',
  message: 'Successfully returned all food bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:07:33.497Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2024-12-29', '2024-12-30' ] },
  level: 'info',
  message: 'Successfully got food bookings for user for dates',
  timestamp: '2023-11-19T06:07:33.497Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { deskId: [ 'A1', 'B1' ], dates: [ '2024-12-29', '2024-12-30' ] },
  level: 'info',
  message: 'Booking desk for user',
  timestamp: '2023-11-19T06:07:33.497Z'
}
{
  module: 'desk-booking',
  service: 'bookDesk',
  userId: 'E00001',
  request: { deskId: 'A1', dates: [ '2024-12-29' ] },
  level: 'info',
  message: 'Successfully booked a desk',
  timestamp: '2023-11-19T06:07:33.554Z'
}
{
  module: 'desk-booking',
  service: 'bookDesk',
  bookingId: '8be0b02e-8c16-4775-b1cd-a2d1d7d9363f',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:07:33.555Z'
}
{
  module: 'desk-booking',
  service: 'bookDesk',
  userId: 'E00001',
  request: { deskId: 'B1', dates: [ '2024-12-30' ] },
  level: 'info',
  message: 'Successfully booked a desk',
  timestamp: '2023-11-19T06:07:33.613Z'
}
{
  module: 'desk-booking',
  service: 'bookDesk',
  bookingId: 'f5a4e6fd-7431-4931-8105-f6298b3ed4e8',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:07:33.614Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { deskId: [ 'A1', 'B1' ], dates: [ '2024-12-29', '2024-12-30' ] },
  level: 'info',
  message: 'Successfully booked desk for user',
  timestamp: '2023-11-19T06:07:33.614Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: {
    dates: [ '2024-12-29', '2024-12-30' ],
    workSlot: [ '9AM-5PM', '6AM-3PM' ]
  },
  level: 'info',
  message: 'Booking cab for user',
  timestamp: '2023-11-19T06:07:33.615Z'
}
{
  module: 'cab-booking',
  service: 'bookCab',
  userId: 'E00001',
  request: { dates: [ '2024-12-29' ], workSlot: '9AM-5PM' },
  level: 'info',
  message: 'Successfully booked cab',
  timestamp: '2023-11-19T06:07:33.672Z'
}
{
  module: 'cab-booking',
  service: 'bookCab',
  userId: 'E00001',
  request: { dates: [ '2024-12-29' ], workSlot: '9AM-5PM' },
  bookingId: '3b34ee3a-2348-4011-af84-6e32652d40ac',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:07:33.672Z'
}
{
  module: 'cab-booking',
  service: 'bookCab',
  userId: 'E00001',
  request: { dates: [ '2024-12-30' ], workSlot: '6AM-3PM' },
  level: 'info',
  message: 'Successfully booked cab',
  timestamp: '2023-11-19T06:07:33.730Z'
}
{
  module: 'cab-booking',
  service: 'bookCab',
  userId: 'E00001',
  request: { dates: [ '2024-12-30' ], workSlot: '6AM-3PM' },
  bookingId: 'cc4c8074-e47d-40f4-97ec-cd71abaa7b3b',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:07:33.731Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: {
    dates: [ '2024-12-29', '2024-12-30' ],
    workSlot: [ '9AM-5PM', '6AM-3PM' ]
  },
  level: 'info',
  message: 'Successfully booked cab for user',
  timestamp: '2023-11-19T06:07:33.731Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: {
    dates: [ '2024-12-29', '2024-12-30' ],
    preference: [ 'None', 'Veg' ]
  },
  level: 'info',
  message: 'Booking food for user',
  timestamp: '2023-11-19T06:07:33.731Z'
}
{
  module: 'food-booking',
  service: 'bookFood',
  userId: 'E00001',
  request: { dates: [ '2024-12-30' ], preference: 'Veg' },
  level: 'info',
  message: 'Successfully booked food for multiple dates',
  timestamp: '2023-11-19T06:07:33.789Z'
}
{
  module: 'food-booking',
  service: 'bookFood',
  userId: 'E00001',
  request: { dates: [ '2024-12-30' ], preference: 'Veg' },
  bookingId: '16aa2e23-e011-4172-9838-b99e1b18f515',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:07:33.789Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: {
    dates: [ '2024-12-29', '2024-12-30' ],
    preference: [ 'None', 'Veg' ]
  },
  level: 'info',
  message: 'Successfully booked food for user',
  timestamp: '2023-11-19T06:07:33.789Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2024-12-29', '2024-12-30' ] },
  level: 'info',
  message: 'Booking successfull',
  timestamp: '2023-11-19T06:07:33.789Z'
}
{
  module: 'verify-jwt-token',
  service: 'verifyJWT',
  userId: 'E00001',
  level: 'info',
  message: 'Access token verified',
  timestamp: '2023-11-19T06:08:57.241Z'
}
{
  module: 'check-auth',
  service: 'checkAuthStatus',
  userId: 'E00001',
  level: 'info',
  message: 'User authenticated',
  timestamp: '2023-11-19T06:08:57.241Z'
}
{
  module: 'user-all-booking-controller',
  userId: 'E00001',
  service: 'bookAll',
  request: {
    dates: [ '2025-12-29', '2025-12-30' ],
    isDeskRequired: true,
    isCabRequired: true,
    isFoodRequired: true
  },
  level: 'info',
  message: 'Formatting dates and checking buffer',
  timestamp: '2023-11-19T06:08:57.241Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2025-12-29', '2025-12-30' ] },
  level: 'info',
  message: 'Getting desk bookings for user for dates',
  timestamp: '2023-11-19T06:08:57.242Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingsForUserForDates',
  userId: 'E00001',
  request: { dates: [ '2025-12-29', '2025-12-30' ] },
  level: 'info',
  message: 'Successfully got all desk bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:08:58.275Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  level: 'error',
  message: 'Desk bookings is undefined',
  timestamp: '2023-11-19T06:08:58.276Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E00001',
  request: { dates: [ '2025-12-29', '2025-12-30' ] },
  level: 'info',
  message: 'Successfully formatted all desk bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:08:58.277Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E00001',
  request: { dates: [ '2025-12-29', '2025-12-30' ] },
  level: 'info',
  message: 'Successfully returned all desk bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:08:58.277Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2025-12-29', '2025-12-30' ] },
  level: 'info',
  message: 'Successfully got desk bookings for user for dates',
  timestamp: '2023-11-19T06:08:58.277Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { deskId: [ 'A1', 'B1' ], dates: [ '2025-12-29', '2025-12-30' ] },
  level: 'info',
  message: 'Getting desk bookings by desk id and dates',
  timestamp: '2023-11-19T06:08:58.278Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'A1', dates: [ '2025-12-29' ] },
  level: 'info',
  message: 'Successfully got all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:08:58.337Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'A1', dates: [ '2025-12-29' ] },
  level: 'info',
  message: 'Successfully returned all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:08:58.337Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'B1', dates: [ '2025-12-30' ] },
  level: 'info',
  message: 'Successfully got all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:08:58.395Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'B1', dates: [ '2025-12-30' ] },
  level: 'info',
  message: 'Successfully returned all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:08:58.396Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { deskId: [ 'A1', 'B1' ], dates: [ '2025-12-29', '2025-12-30' ] },
  level: 'info',
  message: 'Successfully got desk bookings by desk id and dates',
  timestamp: '2023-11-19T06:08:58.396Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2025-12-29', '2025-12-30' ] },
  level: 'info',
  message: 'Getting cab bookings for user for dates',
  timestamp: '2023-11-19T06:08:58.397Z'
}
{
  module: 'cab-booking',
  service: 'getCabBookingsForUserForDates',
  userId: 'E00001',
  request: { dates: [ '2025-12-29', '2025-12-30' ] },
  level: 'info',
  message: 'Successfully got cab bookings for user for dates',
  timestamp: '2023-11-19T06:08:58.511Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  level: 'error',
  message: 'Cab bookings not found',
  timestamp: '2023-11-19T06:08:58.512Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  userId: 'E00001',
  request: { dates: [ '2025-12-29', '2025-12-30' ] },
  level: 'info',
  message: 'Successfully formatted cab bookings for user for dates',
  timestamp: '2023-11-19T06:08:58.512Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  userId: 'E00001',
  request: { dates: [ '2025-12-29', '2025-12-30' ] },
  level: 'info',
  message: 'Successfully returned cab bookings for user for dates',
  timestamp: '2023-11-19T06:08:58.513Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2025-12-29', '2025-12-30' ] },
  level: 'info',
  message: 'Successfully got cab bookings for user for dates',
  timestamp: '2023-11-19T06:08:58.513Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2025-12-29', '2025-12-30' ] },
  level: 'info',
  message: 'Getting food bookings for user for dates',
  timestamp: '2023-11-19T06:08:58.513Z'
}
{
  module: 'food-booking',
  service: 'getFoodBookingsForUserForDates',
  userId: 'E00001',
  request: { dates: [ '2025-12-29', '2025-12-30' ] },
  level: 'info',
  message: 'Successfully got all food bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:08:58.633Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  level: 'error',
  message: 'foodBookings is undefined',
  timestamp: '2023-11-19T06:08:58.634Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E00001',
  request: { dates: [ '2025-12-29', '2025-12-30' ] },
  level: 'info',
  message: 'Successfully formatted all food bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:08:58.634Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E00001',
  request: { dates: [ '2025-12-29', '2025-12-30' ] },
  level: 'info',
  message: 'Successfully returned all food bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:08:58.634Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2025-12-29', '2025-12-30' ] },
  level: 'info',
  message: 'Successfully got food bookings for user for dates',
  timestamp: '2023-11-19T06:08:58.635Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { deskId: [ 'A1', 'B1' ], dates: [ '2025-12-29', '2025-12-30' ] },
  level: 'info',
  message: 'Booking desk for user',
  timestamp: '2023-11-19T06:08:58.635Z'
}
{
  module: 'desk-booking',
  service: 'bookDesk',
  userId: 'E00001',
  request: { deskId: 'A1', dates: [ '2025-12-29' ] },
  level: 'info',
  message: 'Successfully booked a desk',
  timestamp: '2023-11-19T06:08:58.692Z'
}
{
  module: 'desk-booking',
  service: 'bookDesk',
  bookingId: 'f66c6694-00ce-459f-b857-6bb7c00e1e5c',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:08:58.694Z'
}
{
  module: 'desk-booking',
  service: 'bookDesk',
  userId: 'E00001',
  request: { deskId: 'B1', dates: [ '2025-12-30' ] },
  level: 'info',
  message: 'Successfully booked a desk',
  timestamp: '2023-11-19T06:08:58.752Z'
}
{
  module: 'desk-booking',
  service: 'bookDesk',
  bookingId: 'a7a1c110-c4ce-426f-98d2-6fc54347bb70',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:08:58.752Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { deskId: [ 'A1', 'B1' ], dates: [ '2025-12-29', '2025-12-30' ] },
  level: 'info',
  message: 'Successfully booked desk for user',
  timestamp: '2023-11-19T06:08:58.753Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: {
    dates: [ '2025-12-29', '2025-12-30' ],
    workSlot: [ '9AM-5PM', '6AM-3PM' ]
  },
  level: 'info',
  message: 'Booking cab for user',
  timestamp: '2023-11-19T06:08:58.753Z'
}
{
  module: 'cab-booking',
  service: 'bookCab',
  userId: 'E00001',
  request: { dates: [ '2025-12-29' ], workSlot: '9AM-5PM' },
  level: 'info',
  message: 'Successfully booked cab',
  timestamp: '2023-11-19T06:08:58.813Z'
}
{
  module: 'cab-booking',
  service: 'bookCab',
  userId: 'E00001',
  request: { dates: [ '2025-12-29' ], workSlot: '9AM-5PM' },
  bookingId: '98b057de-3ce1-497d-b2b4-4f1644ae7651',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:08:58.813Z'
}
{
  module: 'cab-booking',
  service: 'bookCab',
  userId: 'E00001',
  request: { dates: [ '2025-12-30' ], workSlot: '6AM-3PM' },
  level: 'info',
  message: 'Successfully booked cab',
  timestamp: '2023-11-19T06:08:58.870Z'
}
{
  module: 'cab-booking',
  service: 'bookCab',
  userId: 'E00001',
  request: { dates: [ '2025-12-30' ], workSlot: '6AM-3PM' },
  bookingId: 'eba971bf-5fff-4e20-aff6-e0ee8a7e71a2',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:08:58.870Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: {
    dates: [ '2025-12-29', '2025-12-30' ],
    workSlot: [ '9AM-5PM', '6AM-3PM' ]
  },
  level: 'info',
  message: 'Successfully booked cab for user',
  timestamp: '2023-11-19T06:08:58.870Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: {
    dates: [ '2025-12-29', '2025-12-30' ],
    preference: [ 'None', 'Veg' ]
  },
  level: 'info',
  message: 'Booking food for user',
  timestamp: '2023-11-19T06:08:58.870Z'
}
{
  module: 'food-booking',
  service: 'bookFood',
  userId: 'E00001',
  request: { dates: [ '2025-12-30' ], preference: 'Veg' },
  level: 'info',
  message: 'Successfully booked food for multiple dates',
  timestamp: '2023-11-19T06:08:58.928Z'
}
{
  module: 'food-booking',
  service: 'bookFood',
  userId: 'E00001',
  request: { dates: [ '2025-12-30' ], preference: 'Veg' },
  bookingId: '6c14cdb7-4ee0-4a26-96e1-8d613f2e7f10',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:08:58.928Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: {
    dates: [ '2025-12-29', '2025-12-30' ],
    preference: [ 'None', 'Veg' ]
  },
  level: 'info',
  message: 'Successfully booked food for user',
  timestamp: '2023-11-19T06:08:58.929Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2025-12-29', '2025-12-30' ] },
  level: 'info',
  message: 'Booking successfull',
  timestamp: '2023-11-19T06:08:58.929Z'
}
{
  module: 'verify-jwt-token',
  service: 'verifyJWT',
  userId: 'E00001',
  level: 'info',
  message: 'Access token verified',
  timestamp: '2023-11-19T06:09:51.129Z'
}
{
  module: 'check-auth',
  service: 'checkAuthStatus',
  userId: 'E00001',
  level: 'info',
  message: 'User authenticated',
  timestamp: '2023-11-19T06:09:51.129Z'
}
{
  module: 'user-all-booking-controller',
  userId: 'E00001',
  service: 'bookAll',
  request: {
    dates: [ '2025-01-29', '2025-01-30' ],
    isDeskRequired: true,
    isCabRequired: true,
    isFoodRequired: true
  },
  level: 'info',
  message: 'Formatting dates and checking buffer',
  timestamp: '2023-11-19T06:09:51.129Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Getting desk bookings for user for dates',
  timestamp: '2023-11-19T06:09:51.129Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingsForUserForDates',
  userId: 'E00001',
  request: { dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Successfully got all desk bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:09:51.828Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  level: 'error',
  message: 'Desk bookings is undefined',
  timestamp: '2023-11-19T06:09:51.828Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E00001',
  request: { dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Successfully formatted all desk bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:09:51.828Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E00001',
  request: { dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Successfully returned all desk bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:09:51.828Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Successfully got desk bookings for user for dates',
  timestamp: '2023-11-19T06:09:51.828Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { deskId: [ 'A1', 'B1' ], dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Getting desk bookings by desk id and dates',
  timestamp: '2023-11-19T06:09:51.828Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'A1', dates: [ '2025-01-29' ] },
  level: 'info',
  message: 'Successfully got all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:09:51.885Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'A1', dates: [ '2025-01-29' ] },
  level: 'info',
  message: 'Successfully returned all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:09:51.885Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'B1', dates: [ '2025-01-30' ] },
  level: 'info',
  message: 'Successfully got all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:09:51.942Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'B1', dates: [ '2025-01-30' ] },
  level: 'info',
  message: 'Successfully returned all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:09:51.943Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { deskId: [ 'A1', 'B1' ], dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Successfully got desk bookings by desk id and dates',
  timestamp: '2023-11-19T06:09:51.943Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Getting cab bookings for user for dates',
  timestamp: '2023-11-19T06:09:51.944Z'
}
{
  module: 'cab-booking',
  service: 'getCabBookingsForUserForDates',
  userId: 'E00001',
  request: { dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Successfully got cab bookings for user for dates',
  timestamp: '2023-11-19T06:09:52.056Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  level: 'error',
  message: 'Cab bookings not found',
  timestamp: '2023-11-19T06:09:52.057Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  userId: 'E00001',
  request: { dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Successfully formatted cab bookings for user for dates',
  timestamp: '2023-11-19T06:09:52.057Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  userId: 'E00001',
  request: { dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Successfully returned cab bookings for user for dates',
  timestamp: '2023-11-19T06:09:52.057Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Successfully got cab bookings for user for dates',
  timestamp: '2023-11-19T06:09:52.057Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Getting food bookings for user for dates',
  timestamp: '2023-11-19T06:09:52.057Z'
}
{
  module: 'food-booking',
  service: 'getFoodBookingsForUserForDates',
  userId: 'E00001',
  request: { dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Successfully got all food bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:09:52.171Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  level: 'error',
  message: 'foodBookings is undefined',
  timestamp: '2023-11-19T06:09:52.171Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E00001',
  request: { dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Successfully formatted all food bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:09:52.172Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E00001',
  request: { dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Successfully returned all food bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:09:52.172Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Successfully got food bookings for user for dates',
  timestamp: '2023-11-19T06:09:52.172Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { deskId: [ 'A1', 'B1' ], dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Booking desk for user',
  timestamp: '2023-11-19T06:09:52.172Z'
}
{
  module: 'desk-booking',
  service: 'bookDesk',
  userId: 'E00001',
  request: { deskId: 'A1', dates: [ '2025-01-29' ] },
  level: 'info',
  message: 'Successfully booked a desk',
  timestamp: '2023-11-19T06:09:52.229Z'
}
{
  module: 'desk-booking',
  service: 'bookDesk',
  bookingId: 'cffe81be-428a-4492-9d25-e276d1286853',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:09:52.229Z'
}
{
  module: 'desk-booking',
  service: 'bookDesk',
  userId: 'E00001',
  request: { deskId: 'B1', dates: [ '2025-01-30' ] },
  level: 'info',
  message: 'Successfully booked a desk',
  timestamp: '2023-11-19T06:09:52.287Z'
}
{
  module: 'desk-booking',
  service: 'bookDesk',
  bookingId: '06de9b15-514b-410e-bd6c-1d55ef7e42da',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:09:52.287Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { deskId: [ 'A1', 'B1' ], dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Successfully booked desk for user',
  timestamp: '2023-11-19T06:09:52.287Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: {
    dates: [ '2025-01-29', '2025-01-30' ],
    workSlot: [ '9AM-5PM', '6AM-3PM' ]
  },
  level: 'info',
  message: 'Booking cab for user',
  timestamp: '2023-11-19T06:09:52.287Z'
}
{
  module: 'cab-booking',
  service: 'bookCab',
  userId: 'E00001',
  request: { dates: [ '2025-01-29' ], workSlot: '9AM-5PM' },
  level: 'info',
  message: 'Successfully booked cab',
  timestamp: '2023-11-19T06:09:52.344Z'
}
{
  module: 'cab-booking',
  service: 'bookCab',
  userId: 'E00001',
  request: { dates: [ '2025-01-29' ], workSlot: '9AM-5PM' },
  bookingId: '4c6f1b7f-43c8-4900-99ed-df4c944628c4',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:09:52.345Z'
}
{
  module: 'cab-booking',
  service: 'bookCab',
  userId: 'E00001',
  request: { dates: [ '2025-01-30' ], workSlot: '6AM-3PM' },
  level: 'info',
  message: 'Successfully booked cab',
  timestamp: '2023-11-19T06:09:52.403Z'
}
{
  module: 'cab-booking',
  service: 'bookCab',
  userId: 'E00001',
  request: { dates: [ '2025-01-30' ], workSlot: '6AM-3PM' },
  bookingId: 'b29ad8db-2cd7-4587-b24d-604f3f3d4703',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:09:52.404Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: {
    dates: [ '2025-01-29', '2025-01-30' ],
    workSlot: [ '9AM-5PM', '6AM-3PM' ]
  },
  level: 'info',
  message: 'Successfully booked cab for user',
  timestamp: '2023-11-19T06:09:52.404Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: {
    dates: [ '2025-01-29', '2025-01-30' ],
    preference: [ 'Veg', 'Veg' ]
  },
  level: 'info',
  message: 'Booking food for user',
  timestamp: '2023-11-19T06:09:52.404Z'
}
{
  module: 'food-booking',
  service: 'bookFood',
  userId: 'E00001',
  request: { dates: [ '2025-01-29' ], preference: 'Veg' },
  level: 'info',
  message: 'Successfully booked food for multiple dates',
  timestamp: '2023-11-19T06:09:52.462Z'
}
{
  module: 'food-booking',
  service: 'bookFood',
  userId: 'E00001',
  request: { dates: [ '2025-01-29' ], preference: 'Veg' },
  bookingId: '8074acca-8225-4fa6-a0c4-023fc5507b67',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:09:52.462Z'
}
{
  module: 'food-booking',
  service: 'bookFood',
  userId: 'E00001',
  request: { dates: [ '2025-01-30' ], preference: 'Veg' },
  level: 'info',
  message: 'Successfully booked food for multiple dates',
  timestamp: '2023-11-19T06:09:52.519Z'
}
{
  module: 'food-booking',
  service: 'bookFood',
  userId: 'E00001',
  request: { dates: [ '2025-01-30' ], preference: 'Veg' },
  bookingId: '90f27daa-a9ae-45c6-919f-26cc1d622e5f',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:09:52.519Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: {
    dates: [ '2025-01-29', '2025-01-30' ],
    preference: [ 'Veg', 'Veg' ]
  },
  level: 'info',
  message: 'Successfully booked food for user',
  timestamp: '2023-11-19T06:09:52.519Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Booking successfull',
  timestamp: '2023-11-19T06:09:52.519Z'
}
{
  module: 'verify-jwt-token',
  service: 'verifyJWT',
  userId: 'E00001',
  level: 'info',
  message: 'Access token verified',
  timestamp: '2023-11-19T06:11:24.265Z'
}
{
  module: 'check-auth',
  service: 'checkAuthStatus',
  userId: 'E00001',
  level: 'info',
  message: 'User authenticated',
  timestamp: '2023-11-19T06:11:24.265Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E00001',
  request: { startDate: '2023-11-01', endDate: '2023-12-30' },
  level: 'info',
  message: 'Forwarding request to getAllBookingsForUserBetweenDates controller',
  timestamp: '2023-11-19T06:11:24.265Z'
}
{
  module: 'user-all-booking-controller',
  userId: 'E00001',
  service: 'getAllBookingsForUserBetweenDates',
  request: { startDate: '2023-11-01', endDate: '2023-12-30' },
  level: 'info',
  message: 'Formatting start date and end date',
  timestamp: '2023-11-19T06:11:24.266Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllBookingsForUserBetweenDates',
  userId: 'E00001',
  request: { startDate: '2023-11-01', endDate: '2023-12-30' },
  level: 'info',
  message: 'Getting all desk bookings for user between two dates',
  timestamp: '2023-11-19T06:11:24.266Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingsForUserBetweenDates',
  userId: 'E00001',
  request: { startDate: '2023-11-01', endDate: '2023-12-30' },
  level: 'info',
  message: 'Successfully got all desk bookings for a user between two dates',
  timestamp: '2023-11-19T06:11:24.981Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  level: 'info',
  message: 'Successfully formatted desk bookings',
  timestamp: '2023-11-19T06:11:24.982Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E00001',
  request: { startDate: '2023-11-01', endDate: '2023-12-30' },
  level: 'info',
  message: 'Successfully formatted all desk bookings for a user between two dates',
  timestamp: '2023-11-19T06:11:24.982Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E00001',
  request: { startDate: '2023-11-01', endDate: '2023-12-30' },
  level: 'info',
  message: 'Successfully returned all desk bookings for a user between two dates',
  timestamp: '2023-11-19T06:11:24.982Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllBookingsForUserBetweenDates',
  userId: 'E00001',
  request: { startDate: '2023-11-01', endDate: '2023-12-30' },
  level: 'info',
  message: 'Successfully got all desk bookings for user between two dates',
  timestamp: '2023-11-19T06:11:24.983Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllBookingsForUserBetweenDates',
  userId: 'E00001',
  request: { startDate: '2023-11-01', endDate: '2023-12-30' },
  level: 'info',
  message: 'Getting all cab bookings for user between two dates',
  timestamp: '2023-11-19T06:11:24.983Z'
}
{
  module: 'cab-booking',
  service: 'getCabBookingsForUserBetweenDates',
  userId: 'E00001',
  request: { startDate: '2023-11-01', endDate: '2023-12-30' },
  level: 'info',
  message: 'Successfully got cab bookings for user between dates',
  timestamp: '2023-11-19T06:11:25.047Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  level: 'info',
  message: 'Successfully formatted cab bookings',
  timestamp: '2023-11-19T06:11:25.048Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  userId: 'E00001',
  request: { startDate: '2023-11-01', endDate: '2023-12-30' },
  level: 'info',
  message: 'Successfully formatted cab bookings for user between dates',
  timestamp: '2023-11-19T06:11:25.048Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  userId: 'E00001',
  request: { startDate: '2023-11-01', endDate: '2023-12-30' },
  level: 'info',
  message: 'Successfully returned cab bookings for user between dates',
  timestamp: '2023-11-19T06:11:25.048Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllBookingsForUserBetweenDates',
  userId: 'E00001',
  request: { startDate: '2023-11-01', endDate: '2023-12-30' },
  level: 'info',
  message: 'Successfully got all cab bookings for user between two dates',
  timestamp: '2023-11-19T06:11:25.049Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllBookingsForUserBetweenDates',
  userId: 'E00001',
  request: { startDate: '2023-11-01', endDate: '2023-12-30' },
  level: 'info',
  message: 'Getting all food bookings for user between two dates',
  timestamp: '2023-11-19T06:11:25.049Z'
}
{
  module: 'food-booking',
  service: 'getFoodBookingsForUserBetweenDates',
  userId: 'E00001',
  request: { startDate: '2023-11-01', endDate: '2023-12-30' },
  level: 'info',
  message: 'Successfully got all food bookings for a user between two dates',
  timestamp: '2023-11-19T06:11:25.111Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  level: 'info',
  message: 'Successfully formatted food bookings',
  timestamp: '2023-11-19T06:11:25.112Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E00001',
  request: { startDate: '2023-11-01', endDate: '2023-12-30' },
  level: 'info',
  message: 'Successfully formatted all food bookings for a user between two dates',
  timestamp: '2023-11-19T06:11:25.112Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E00001',
  request: { startDate: '2023-11-01', endDate: '2023-12-30' },
  level: 'info',
  message: 'Successfully returned all food bookings for a user between two dates',
  timestamp: '2023-11-19T06:11:25.112Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllBookingsForUserBetweenDates',
  userId: 'E00001',
  request: { startDate: '2023-11-01', endDate: '2023-12-30' },
  level: 'info',
  message: 'Successfully got all food bookings for user between two dates',
  timestamp: '2023-11-19T06:11:25.112Z'
}
{
  module: 'user-all-booking-controller',
  userId: 'E00001',
  service: 'getAllBookingsForUserBetweenDates',
  level: 'info',
  message: 'Sorting all bookings by dateBooked',
  timestamp: '2023-11-19T06:11:25.112Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllBookingsForUserBetweenDates',
  userId: 'E00001',
  request: { startDate: '2023-11-01', endDate: '2023-12-30' },
  level: 'info',
  message: 'Successfully returned all bookings for user between two dates',
  timestamp: '2023-11-19T06:11:25.113Z'
}
{
  module: 'verify-jwt-token',
  service: 'verifyJWT',
  userId: 'E00001',
  level: 'info',
  message: 'Access token verified',
  timestamp: '2023-11-19T06:15:35.693Z'
}
{
  module: 'check-auth',
  service: 'checkAuthStatus',
  userId: 'E00001',
  level: 'info',
  message: 'User authenticated',
  timestamp: '2023-11-19T06:15:35.693Z'
}
{
  module: 'user-all-booking-controller',
  userId: 'E00001',
  service: 'bookAll',
  request: {
    dates: [ '2025-01-29', '2025-01-30' ],
    isDeskRequired: true,
    isCabRequired: true,
    isFoodRequired: true
  },
  level: 'info',
  message: 'Formatting dates and checking buffer',
  timestamp: '2023-11-19T06:15:35.693Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Getting desk bookings for user for dates',
  timestamp: '2023-11-19T06:15:35.694Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingsForUserForDates',
  userId: 'E00001',
  request: { dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Successfully got all desk bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:15:36.696Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  level: 'info',
  message: 'Successfully formatted desk bookings',
  timestamp: '2023-11-19T06:15:36.697Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E00001',
  request: { dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Successfully formatted all desk bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:15:36.697Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E00001',
  request: { dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Successfully returned all desk bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:15:36.697Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2025-01-29', '2025-01-30' ] },
  level: 'info',
  message: 'Successfully got desk bookings for user for dates',
  timestamp: '2023-11-19T06:15:36.697Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  level: 'error',
  message: 'User has already booked a desk for one or more of the dates',
  timestamp: '2023-11-19T06:15:36.697Z'
}
{
  module: 'error-handler',
  service: 'handleErrors',
  error: SyntaxError: Unexpected token   in JSON at position 240
      at JSON.parse (<anonymous>)
      at parse (C:\Users\vitha\OneDrive\Documents\GitHub\employee-management-system\server\node_modules\body-parser\lib\types\json.js:89:19)
      at C:\Users\vitha\OneDrive\Documents\GitHub\employee-management-system\server\node_modules\body-parser\lib\read.js:128:18
      at AsyncResource.runInAsyncScope (node:async_hooks:204:9)
      at invokeCallback (C:\Users\vitha\OneDrive\Documents\GitHub\employee-management-system\server\node_modules\raw-body\index.js:231:16)
      at done (C:\Users\vitha\OneDrive\Documents\GitHub\employee-management-system\server\node_modules\raw-body\index.js:220:7)
      at IncomingMessage.onEnd (C:\Users\vitha\OneDrive\Documents\GitHub\employee-management-system\server\node_modules\raw-body\index.js:280:7)
      at IncomingMessage.emit (node:events:513:28)
      at endReadableNT (node:internal/streams/readable:1359:12)
      at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {
    expose: true,
    statusCode: 400,
    status: 400,
    body: '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\r\n' +
      '{\r\n' +
      '\t"dates" : ["2024/12/24","2024/12/25"], \n' +
      '\t"deskId" : ["A2","A3"], \n' +
      '    "workSlot" : ["9AM to 5PM","9AM to 5PM"], \n' +
      '\t"preference" : ["Veg","Veg"], \n' +
      '\r\n' +
      '\t"isDeskRequired" : true, \n' +
      '\t"isCabRequired" : true, \n' +
      '\t"isFoodRequired" : true \n' +
      '\r\n' +
      '}',
    type: 'entity.parse.failed'
  },
  level: 'error',
  message: 'Something went wrong on the server',
  timestamp: '2023-11-19T06:24:43.530Z'
}
{
  module: 'error-handler',
  service: 'handleErrors',
  level: 'error',
  message: 'Internal Server Error',
  timestamp: '2023-11-19T06:24:43.531Z'
}
{
  module: 'error-handler',
  service: 'handleErrors',
  error: SyntaxError: Unexpected token   in JSON at position 240
      at JSON.parse (<anonymous>)
      at parse (C:\Users\vitha\OneDrive\Documents\GitHub\employee-management-system\server\node_modules\body-parser\lib\types\json.js:89:19)
      at C:\Users\vitha\OneDrive\Documents\GitHub\employee-management-system\server\node_modules\body-parser\lib\read.js:128:18
      at AsyncResource.runInAsyncScope (node:async_hooks:204:9)
      at invokeCallback (C:\Users\vitha\OneDrive\Documents\GitHub\employee-management-system\server\node_modules\raw-body\index.js:231:16)
      at done (C:\Users\vitha\OneDrive\Documents\GitHub\employee-management-system\server\node_modules\raw-body\index.js:220:7)
      at IncomingMessage.onEnd (C:\Users\vitha\OneDrive\Documents\GitHub\employee-management-system\server\node_modules\raw-body\index.js:280:7)
      at IncomingMessage.emit (node:events:513:28)
      at endReadableNT (node:internal/streams/readable:1359:12)
      at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {
    expose: true,
    statusCode: 400,
    status: 400,
    body: '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\r\n' +
      '{\r\n' +
      '\t"dates" : ["2024/12/24","2024/12/25"], \n' +
      '\t"deskId" : ["A2","A3"], \n' +
      '    "workSlot" : ["9AM to 5PM","9AM to 5PM"], \n' +
      '\t"preference" : ["Veg","Veg"], \n' +
      '\r\n' +
      '\t"isDeskRequired" : true, \n' +
      '\t"isCabRequired" : true, \n' +
      '\t"isFoodRequired" : true \n' +
      '\r\n' +
      '}',
    type: 'entity.parse.failed'
  },
  level: 'error',
  message: 'Something went wrong on the server',
  timestamp: '2023-11-19T06:25:00.238Z'
}
{
  module: 'error-handler',
  service: 'handleErrors',
  level: 'error',
  message: 'Internal Server Error',
  timestamp: '2023-11-19T06:25:00.238Z'
}
{
  message: 'Server listening on port 3001',
  level: 'info',
  timestamp: '2023-11-19T06:26:53.432Z'
}
{
  message: 'Connected to database neondb on port 5432 at ep-muddy-frog-18780884-pooler.ap-southeast-1.aws.neon.tech',
  level: 'info',
  timestamp: '2023-11-19T06:26:55.846Z'
}
{
  module: 'error-handler',
  service: 'handleErrors',
  error: SyntaxError: Unexpected token   in JSON at position 256
      at JSON.parse (<anonymous>)
      at parse (C:\Users\vitha\OneDrive\Documents\GitHub\employee-management-system\server\node_modules\body-parser\lib\types\json.js:89:19)
      at C:\Users\vitha\OneDrive\Documents\GitHub\employee-management-system\server\node_modules\body-parser\lib\read.js:128:18
      at AsyncResource.runInAsyncScope (node:async_hooks:204:9)
      at invokeCallback (C:\Users\vitha\OneDrive\Documents\GitHub\employee-management-system\server\node_modules\raw-body\index.js:231:16)
      at done (C:\Users\vitha\OneDrive\Documents\GitHub\employee-management-system\server\node_modules\raw-body\index.js:220:7)
      at IncomingMessage.onEnd (C:\Users\vitha\OneDrive\Documents\GitHub\employee-management-system\server\node_modules\raw-body\index.js:280:7)
      at IncomingMessage.emit (node:events:513:28)
      at endReadableNT (node:internal/streams/readable:1359:12)
      at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {
    expose: true,
    statusCode: 400,
    status: 400,
    body: '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\r\n' +
      '{\r\n' +
      '    "dates" : ["2024/12/24","2024/12/25"], \n' +
      '    "deskId" : ["A2","A3"], \n' +
      '    "workSlot" : ["9AM to 5PM","9AM to 5PM"], \n' +
      '    "preference" : ["Veg","Veg"], \n' +
      '    "isDeskRequired" : true, \n' +
      '    "isCabRequired" : true, \n' +
      '    "isFoodRequired" : true \n' +
      '}',
    type: 'entity.parse.failed'
  },
  level: 'error',
  message: 'Something went wrong on the server',
  timestamp: '2023-11-19T06:27:47.419Z'
}
{
  module: 'error-handler',
  service: 'handleErrors',
  level: 'error',
  message: 'Internal Server Error',
  timestamp: '2023-11-19T06:27:47.422Z'
}
{
  module: 'error-handler',
  service: 'handleErrors',
  error: SyntaxError: Unexpected token   in JSON at position 256
      at JSON.parse (<anonymous>)
      at parse (C:\Users\vitha\OneDrive\Documents\GitHub\employee-management-system\server\node_modules\body-parser\lib\types\json.js:89:19)
      at C:\Users\vitha\OneDrive\Documents\GitHub\employee-management-system\server\node_modules\body-parser\lib\read.js:128:18
      at AsyncResource.runInAsyncScope (node:async_hooks:204:9)
      at invokeCallback (C:\Users\vitha\OneDrive\Documents\GitHub\employee-management-system\server\node_modules\raw-body\index.js:231:16)
      at done (C:\Users\vitha\OneDrive\Documents\GitHub\employee-management-system\server\node_modules\raw-body\index.js:220:7)
      at IncomingMessage.onEnd (C:\Users\vitha\OneDrive\Documents\GitHub\employee-management-system\server\node_modules\raw-body\index.js:280:7)
      at IncomingMessage.emit (node:events:513:28)
      at endReadableNT (node:internal/streams/readable:1359:12)
      at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {
    expose: true,
    statusCode: 400,
    status: 400,
    body: '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\n' +
      '\r\n' +
      '{\r\n' +
      '    "dates" : ["2024/12/24","2024/12/25"], \n' +
      '    "deskId" : ["A2","A3"], \n' +
      '    "workSlot" : ["9AM to 5PM","9AM to 5PM"], \n' +
      '    "preference" : ["Veg","Veg"], \n' +
      '    "isDeskRequired" : true, \n' +
      '    "isCabRequired" : true, \n' +
      '    "isFoodRequired" : true \n' +
      '}',
    type: 'entity.parse.failed'
  },
  level: 'error',
  message: 'Something went wrong on the server',
  timestamp: '2023-11-19T06:29:14.142Z'
}
{
  module: 'error-handler',
  service: 'handleErrors',
  level: 'error',
  message: 'Internal Server Error',
  timestamp: '2023-11-19T06:29:14.142Z'
}
{
  module: 'verify-jwt-token',
  service: 'verifyJWT',
  userId: 'E00001',
  level: 'info',
  message: 'Access token verified',
  timestamp: '2023-11-19T06:30:33.705Z'
}
{
  module: 'check-auth',
  service: 'checkAuthStatus',
  userId: 'E00001',
  level: 'info',
  message: 'User authenticated',
  timestamp: '2023-11-19T06:30:33.706Z'
}
{
  module: 'user-all-booking-controller',
  userId: 'E00001',
  service: 'bookAll',
  request: {
    dates: [ '2024-01-29', '2024-01-30' ],
    isDeskRequired: true,
    isCabRequired: true,
    isFoodRequired: true
  },
  level: 'info',
  message: 'Formatting dates and checking buffer',
  timestamp: '2023-11-19T06:30:33.710Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Getting desk bookings for user for dates',
  timestamp: '2023-11-19T06:30:33.711Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingsForUserForDates',
  userId: 'E00001',
  request: { dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Successfully got all desk bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:30:34.819Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  level: 'error',
  message: 'Desk bookings is undefined',
  timestamp: '2023-11-19T06:30:34.820Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E00001',
  request: { dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Successfully formatted all desk bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:30:34.821Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E00001',
  request: { dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Successfully returned all desk bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:30:34.821Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Successfully got desk bookings for user for dates',
  timestamp: '2023-11-19T06:30:34.822Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { deskId: [ 'A1', 'B1' ], dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Getting desk bookings by desk id and dates',
  timestamp: '2023-11-19T06:30:34.822Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'A1', dates: [ '2024-01-29' ] },
  level: 'info',
  message: 'Successfully got all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:30:34.877Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'A1', dates: [ '2024-01-29' ] },
  level: 'info',
  message: 'Successfully returned all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:30:34.877Z'
}
{
  message: 'Server listening on port 3001',
  level: 'info',
  timestamp: '2023-11-19T06:35:12.235Z'
}
{
  message: 'Connected to database neondb on port 5432 at ep-muddy-frog-18780884-pooler.ap-southeast-1.aws.neon.tech',
  level: 'info',
  timestamp: '2023-11-19T06:35:13.192Z'
}
{
  module: 'verify-jwt-token',
  service: 'verifyJWT',
  userId: 'E00001',
  level: 'info',
  message: 'Access token verified',
  timestamp: '2023-11-19T06:35:16.073Z'
}
{
  module: 'check-auth',
  service: 'checkAuthStatus',
  userId: 'E00001',
  level: 'info',
  message: 'User authenticated',
  timestamp: '2023-11-19T06:35:16.077Z'
}
{
  module: 'user-all-booking-controller',
  userId: 'E00001',
  service: 'bookAll',
  request: {
    dates: [ '2024-01-29', '2024-01-30' ],
    isDeskRequired: true,
    isCabRequired: true,
    isFoodRequired: true
  },
  level: 'info',
  message: 'Formatting dates and checking buffer',
  timestamp: '2023-11-19T06:35:16.082Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Getting desk bookings for user for dates',
  timestamp: '2023-11-19T06:35:16.084Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingsForUserForDates',
  userId: 'E00001',
  request: { dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Successfully got all desk bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:35:19.286Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  level: 'error',
  message: 'Desk bookings is undefined',
  timestamp: '2023-11-19T06:35:19.287Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E00001',
  request: { dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Successfully formatted all desk bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:35:19.288Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E00001',
  request: { dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Successfully returned all desk bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:35:19.290Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Successfully got desk bookings for user for dates',
  timestamp: '2023-11-19T06:35:19.292Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { deskId: [ 'A1', 'B1' ], dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Getting desk bookings by desk id and dates',
  timestamp: '2023-11-19T06:35:19.293Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'A1', dates: [ '2024-01-29' ] },
  level: 'info',
  message: 'Successfully got all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:35:19.351Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'A1', dates: [ '2024-01-29' ] },
  level: 'info',
  message: 'Successfully returned all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:35:19.352Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'B1', dates: [ '2024-01-30' ] },
  level: 'info',
  message: 'Successfully got all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:35:19.410Z'
}
{
  module: 'desk-booking',
  service: 'getDeskBookingByDeskIdAndDates',
  request: { deskId: 'B1', dates: [ '2024-01-30' ] },
  level: 'info',
  message: 'Successfully returned all desk bookings for a desk id for the dates',
  timestamp: '2023-11-19T06:35:19.412Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { deskId: [ 'A1', 'B1' ], dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Successfully got desk bookings by desk id and dates',
  timestamp: '2023-11-19T06:35:19.413Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Getting cab bookings for user for dates',
  timestamp: '2023-11-19T06:35:19.413Z'
}
{
  module: 'cab-booking',
  service: 'getCabBookingsForUserForDates',
  userId: 'E00001',
  request: { dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Successfully got cab bookings for user for dates',
  timestamp: '2023-11-19T06:35:19.824Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  level: 'error',
  message: 'Cab bookings not found',
  timestamp: '2023-11-19T06:35:19.825Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  userId: 'E00001',
  request: { dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Successfully formatted cab bookings for user for dates',
  timestamp: '2023-11-19T06:35:19.826Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  userId: 'E00001',
  request: { dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Successfully returned cab bookings for user for dates',
  timestamp: '2023-11-19T06:35:19.826Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Successfully got cab bookings for user for dates',
  timestamp: '2023-11-19T06:35:19.826Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Getting food bookings for user for dates',
  timestamp: '2023-11-19T06:35:19.827Z'
}
{
  module: 'food-booking',
  service: 'getFoodBookingsForUserForDates',
  userId: 'E00001',
  request: { dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Successfully got all food bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:35:20.526Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  level: 'error',
  message: 'foodBookings is undefined',
  timestamp: '2023-11-19T06:35:20.527Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E00001',
  request: { dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Successfully formatted all food bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:35:20.527Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E00001',
  request: { dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Successfully returned all food bookings for a user for multiple dates',
  timestamp: '2023-11-19T06:35:20.527Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Successfully got food bookings for user for dates',
  timestamp: '2023-11-19T06:35:20.527Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { deskId: [ 'A1', 'B1' ], dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Booking desk for user',
  timestamp: '2023-11-19T06:35:20.527Z'
}
{
  module: 'desk-booking',
  service: 'bookDesk',
  userId: 'E00001',
  request: { deskId: 'A1', dates: [ '2024-01-29' ] },
  level: 'info',
  message: 'Successfully booked a desk',
  timestamp: '2023-11-19T06:35:22.575Z'
}
{
  module: 'desk-booking',
  service: 'bookDesk',
  bookingId: '8d773007-6d8e-4179-94ef-0244be2e0d76',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:35:22.575Z'
}
{
  module: 'desk-booking',
  service: 'bookDesk',
  userId: 'E00001',
  request: { deskId: 'B1', dates: [ '2024-01-30' ] },
  level: 'info',
  message: 'Successfully booked a desk',
  timestamp: '2023-11-19T06:35:22.633Z'
}
{
  module: 'desk-booking',
  service: 'bookDesk',
  bookingId: '64730792-264d-476c-a2bc-fbe437282a22',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:35:22.634Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { deskId: [ 'A1', 'B1' ], dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Successfully booked desk for user',
  timestamp: '2023-11-19T06:35:22.634Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: {
    dates: [ '2024-01-29', '2024-01-30' ],
    workSlot: [ '9AM to 5PM', '6AM to 3PM' ]
  },
  level: 'info',
  message: 'Booking cab for user',
  timestamp: '2023-11-19T06:35:22.634Z'
}
{
  module: 'cab-booking',
  service: 'bookCab',
  userId: 'E00001',
  request: { dates: [ '2024-01-29' ], workSlot: '9AM to 5PM' },
  level: 'info',
  message: 'Successfully booked cab',
  timestamp: '2023-11-19T06:35:22.991Z'
}
{
  module: 'cab-booking',
  service: 'bookCab',
  userId: 'E00001',
  request: { dates: [ '2024-01-29' ], workSlot: '9AM to 5PM' },
  bookingId: '2225b255-65e1-4526-9431-420c64a51874',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:35:22.991Z'
}
{
  module: 'cab-booking',
  service: 'bookCab',
  userId: 'E00001',
  request: { dates: [ '2024-01-30' ], workSlot: '6AM to 3PM' },
  level: 'info',
  message: 'Successfully booked cab',
  timestamp: '2023-11-19T06:35:23.050Z'
}
{
  module: 'cab-booking',
  service: 'bookCab',
  userId: 'E00001',
  request: { dates: [ '2024-01-30' ], workSlot: '6AM to 3PM' },
  bookingId: '0f39500d-daea-4fce-929d-ccec27678788',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:35:23.051Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: {
    dates: [ '2024-01-29', '2024-01-30' ],
    workSlot: [ '9AM to 5PM', '6AM to 3PM' ]
  },
  level: 'info',
  message: 'Successfully booked cab for user',
  timestamp: '2023-11-19T06:35:23.051Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: {
    dates: [ '2024-01-29', '2024-01-30' ],
    preference: [ 'Veg', 'Non-Veg' ]
  },
  level: 'info',
  message: 'Booking food for user',
  timestamp: '2023-11-19T06:35:23.051Z'
}
{
  module: 'food-booking',
  service: 'bookFood',
  userId: 'E00001',
  request: { dates: [ '2024-01-29' ], preference: 'Veg' },
  level: 'info',
  message: 'Successfully booked food for multiple dates',
  timestamp: '2023-11-19T06:35:27.570Z'
}
{
  module: 'food-booking',
  service: 'bookFood',
  userId: 'E00001',
  request: { dates: [ '2024-01-29' ], preference: 'Veg' },
  bookingId: '5682c14a-b8d4-4d87-bda5-629b08d08ac5',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:35:27.571Z'
}
{
  module: 'food-booking',
  service: 'bookFood',
  userId: 'E00001',
  request: { dates: [ '2024-01-30' ], preference: 'Non-Veg' },
  level: 'info',
  message: 'Successfully booked food for multiple dates',
  timestamp: '2023-11-19T06:35:27.986Z'
}
{
  module: 'food-booking',
  service: 'bookFood',
  userId: 'E00001',
  request: { dates: [ '2024-01-30' ], preference: 'Non-Veg' },
  bookingId: '0188e8e0-1b1d-4680-b40a-f4b7dbe49e96',
  level: 'info',
  message: 'Successfully returned booking id',
  timestamp: '2023-11-19T06:35:27.986Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: {
    dates: [ '2024-01-29', '2024-01-30' ],
    preference: [ 'Veg', 'Non-Veg' ]
  },
  level: 'info',
  message: 'Successfully booked food for user',
  timestamp: '2023-11-19T06:35:27.986Z'
}
{
  module: 'user-all-booking-controller',
  service: 'bookAll',
  userId: 'E00001',
  request: { dates: [ '2024-01-29', '2024-01-30' ] },
  level: 'info',
  message: 'Booking successfull',
  timestamp: '2023-11-19T06:35:27.987Z'
}
{
  message: 'Server listening on port 3001',
  level: 'info',
  timestamp: '2023-11-19T18:09:38.736Z'
}
{
  message: 'Connected to database neondb on port 5432 at ep-muddy-frog-18780884-pooler.ap-southeast-1.aws.neon.tech',
  level: 'info',
  timestamp: '2023-11-19T18:09:40.971Z'
}
{
  module: 'auth-controller',
  service: 'login',
  request: { email: 'trial.user@abcgroup.com' },
  level: 'info',
  message: 'Creating user object',
  timestamp: '2023-11-19T18:10:15.038Z'
}
{
  module: 'user',
  service: 'User constructor',
  level: 'info',
  message: 'User object created',
  timestamp: '2023-11-19T18:10:15.039Z'
}
{
  module: 'auth-controller',
  service: 'login',
  request: { email: 'trial.user@abcgroup.com' },
  level: 'info',
  message: 'Successfully created user object',
  timestamp: '2023-11-19T18:10:15.040Z'
}
{
  module: 'auth-controller',
  service: 'login',
  request: { email: 'trial.user@abcgroup.com' },
  level: 'info',
  message: 'Finding user with same email',
  timestamp: '2023-11-19T18:10:15.040Z'
}
{
  module: 'user',
  service: 'findOne',
  request: { email: 'trial.user@abcgroup.com' },
  level: 'info',
  message: 'Successfully got user by email',
  timestamp: '2023-11-19T18:10:16.233Z'
}
{
  module: 'auth-controller',
  service: 'login',
  request: { email: 'trial.user@abcgroup.com' },
  level: 'info',
  message: 'Successfully found user with same email',
  timestamp: '2023-11-19T18:10:16.233Z'
}
{
  module: 'auth-controller',
  service: 'login',
  request: { email: 'trial.user@abcgroup.com' },
  level: 'info',
  message: 'Checking if password is correct',
  timestamp: '2023-11-19T18:10:16.234Z'
}
{
  module: 'user',
  service: 'hasSamePassword',
  userId: '',
  level: 'info',
  message: 'Comparing passwords',
  timestamp: '2023-11-19T18:10:16.234Z'
}
{
  module: 'auth-controller',
  service: 'login',
  request: { email: 'trial.user@abcgroup.com' },
  level: 'info',
  message: 'Successfully checked if password is correct',
  timestamp: '2023-11-19T18:10:16.344Z'
}
{
  module: 'auth-controller',
  service: 'login',
  userId: 'E10101',
  level: 'info',
  message: 'Creating access and refresh tokens',
  timestamp: '2023-11-19T18:10:16.344Z'
}
{
  module: 'create-jwt-token',
  service: 'createAccessToken',
  userId: 'E10101',
  level: 'info',
  message: 'Creating access token',
  timestamp: '2023-11-19T18:10:16.345Z'
}
{
  module: 'create-jwt-token',
  service: 'createRefreshToken',
  userId: 'E10101',
  level: 'info',
  message: 'Creating refresh token',
  timestamp: '2023-11-19T18:10:16.348Z'
}
{
  module: 'auth-controller',
  service: 'login',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully created access and refresh tokens',
  timestamp: '2023-11-19T18:10:16.350Z'
}
{
  module: 'auth-controller',
  service: 'login',
  userId: 'E10101',
  level: 'info',
  message: 'Replacing refresh tokens',
  timestamp: '2023-11-19T18:10:16.350Z'
}
{
  module: 'user',
  service: 'replaceRefreshTokens',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully replaced refresh tokens',
  timestamp: '2023-11-19T18:10:16.473Z'
}
{
  module: 'auth-controller',
  service: 'login',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully replaced refresh tokens',
  timestamp: '2023-11-19T18:10:16.474Z'
}
{
  module: 'auth-controller',
  service: 'login',
  userId: 'E10101',
  level: 'info',
  message: 'Setting cookie',
  timestamp: '2023-11-19T18:10:16.474Z'
}
{
  module: 'auth-controller',
  service: 'login',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully logged in user',
  timestamp: '2023-11-19T18:10:16.476Z'
}
{
  module: 'verify-jwt-token',
  service: 'verifyJWT',
  userId: 'E10101',
  level: 'info',
  message: 'Access token verified',
  timestamp: '2023-11-19T18:10:21.703Z'
}
{
  module: 'check-auth',
  service: 'checkAuthStatus',
  userId: 'E10101',
  level: 'info',
  message: 'User authenticated',
  timestamp: '2023-11-19T18:10:21.703Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Getting all future desk bookings for user',
  timestamp: '2023-11-19T18:10:21.704Z'
}
{
  module: 'desk-booking',
  service: 'getFutureDeskBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got all future desk bookings for a user',
  timestamp: '2023-11-19T18:10:21.836Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  level: 'info',
  message: 'Successfully formatted desk bookings',
  timestamp: '2023-11-19T18:10:21.841Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully formatted all future desk bookings for a user',
  timestamp: '2023-11-19T18:10:21.842Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully returned all future desk bookings for a user',
  timestamp: '2023-11-19T18:10:21.843Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got all future desk bookings for user',
  timestamp: '2023-11-19T18:10:21.843Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Getting all future cab bookings for user',
  timestamp: '2023-11-19T18:10:21.843Z'
}
{
  module: 'cab-booking',
  service: 'getFutureCabBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got future cab bookings for user',
  timestamp: '2023-11-19T18:10:21.938Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  level: 'info',
  message: 'Successfully formatted cab bookings',
  timestamp: '2023-11-19T18:10:21.940Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully formatted future cab bookings for user',
  timestamp: '2023-11-19T18:10:21.940Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully returned future cab bookings for user',
  timestamp: '2023-11-19T18:10:21.941Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got all future cab bookings for user',
  timestamp: '2023-11-19T18:10:21.941Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Getting all future food bookings for user',
  timestamp: '2023-11-19T18:10:21.943Z'
}
{
  module: 'food-booking',
  service: 'getFutureFoodBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got all future food bookings for a user',
  timestamp: '2023-11-19T18:10:22.059Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  level: 'info',
  message: 'Successfully formatted food bookings',
  timestamp: '2023-11-19T18:10:22.060Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully formatted all future food bookings for a user',
  timestamp: '2023-11-19T18:10:22.060Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully returned all future food bookings for a user',
  timestamp: '2023-11-19T18:10:22.060Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got all future food bookings for user',
  timestamp: '2023-11-19T18:10:22.060Z'
}
{
  module: 'user-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookingsForUser',
  level: 'info',
  message: 'Sorting all future bookings by dateBooked',
  timestamp: '2023-11-19T18:10:22.061Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully returned all future bookings for user',
  timestamp: '2023-11-19T18:10:22.061Z'
}
{
  module: 'verify-jwt-token',
  service: 'verifyJWT',
  userId: 'E10101',
  level: 'info',
  message: 'Access token verified',
  timestamp: '2023-11-19T18:10:35.264Z'
}
{
  module: 'check-auth',
  service: 'checkAuthStatus',
  userId: 'E10101',
  level: 'info',
  message: 'User authenticated',
  timestamp: '2023-11-19T18:10:35.264Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Getting all future desk bookings for user',
  timestamp: '2023-11-19T18:10:35.264Z'
}
{
  module: 'desk-booking',
  service: 'getFutureDeskBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got all future desk bookings for a user',
  timestamp: '2023-11-19T18:10:36.308Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  level: 'info',
  message: 'Successfully formatted desk bookings',
  timestamp: '2023-11-19T18:10:36.309Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully formatted all future desk bookings for a user',
  timestamp: '2023-11-19T18:10:36.309Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully returned all future desk bookings for a user',
  timestamp: '2023-11-19T18:10:36.309Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got all future desk bookings for user',
  timestamp: '2023-11-19T18:10:36.309Z'
}
{
  module: 'user-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookingsForUser',
  level: 'info',
  message: 'Sorting all future bookings by dateBooked',
  timestamp: '2023-11-19T18:10:36.309Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully returned all future bookings for user',
  timestamp: '2023-11-19T18:10:36.309Z'
}
{
  module: 'verify-jwt-token',
  service: 'verifyJWT',
  userId: 'E10101',
  level: 'info',
  message: 'Access token verified',
  timestamp: '2023-11-19T18:10:39.113Z'
}
{
  module: 'check-auth',
  service: 'checkAuthStatus',
  userId: 'E10101',
  level: 'info',
  message: 'User authenticated',
  timestamp: '2023-11-19T18:10:39.114Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Getting all future food bookings for user',
  timestamp: '2023-11-19T18:10:39.114Z'
}
{
  module: 'food-booking',
  service: 'getFutureFoodBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got all future food bookings for a user',
  timestamp: '2023-11-19T18:10:39.272Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  level: 'info',
  message: 'Successfully formatted food bookings',
  timestamp: '2023-11-19T18:10:39.273Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully formatted all future food bookings for a user',
  timestamp: '2023-11-19T18:10:39.273Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully returned all future food bookings for a user',
  timestamp: '2023-11-19T18:10:39.274Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got all future food bookings for user',
  timestamp: '2023-11-19T18:10:39.274Z'
}
{
  module: 'user-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookingsForUser',
  level: 'info',
  message: 'Sorting all future bookings by dateBooked',
  timestamp: '2023-11-19T18:10:39.274Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully returned all future bookings for user',
  timestamp: '2023-11-19T18:10:39.274Z'
}
{
  module: 'verify-jwt-token',
  service: 'verifyJWT',
  userId: 'E10101',
  level: 'info',
  message: 'Access token verified',
  timestamp: '2023-11-19T18:10:41.783Z'
}
{
  module: 'check-auth',
  service: 'checkAuthStatus',
  userId: 'E10101',
  level: 'info',
  message: 'User authenticated',
  timestamp: '2023-11-19T18:10:41.783Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Getting all future desk bookings for user',
  timestamp: '2023-11-19T18:10:41.783Z'
}
{
  module: 'desk-booking',
  service: 'getFutureDeskBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got all future desk bookings for a user',
  timestamp: '2023-11-19T18:10:41.883Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  level: 'info',
  message: 'Successfully formatted desk bookings',
  timestamp: '2023-11-19T18:10:41.884Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully formatted all future desk bookings for a user',
  timestamp: '2023-11-19T18:10:41.885Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully returned all future desk bookings for a user',
  timestamp: '2023-11-19T18:10:41.885Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got all future desk bookings for user',
  timestamp: '2023-11-19T18:10:41.885Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Getting all future cab bookings for user',
  timestamp: '2023-11-19T18:10:41.885Z'
}
{
  module: 'cab-booking',
  service: 'getFutureCabBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got future cab bookings for user',
  timestamp: '2023-11-19T18:10:41.982Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  level: 'info',
  message: 'Successfully formatted cab bookings',
  timestamp: '2023-11-19T18:10:41.983Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully formatted future cab bookings for user',
  timestamp: '2023-11-19T18:10:41.983Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully returned future cab bookings for user',
  timestamp: '2023-11-19T18:10:41.983Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got all future cab bookings for user',
  timestamp: '2023-11-19T18:10:41.983Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Getting all future food bookings for user',
  timestamp: '2023-11-19T18:10:41.984Z'
}
{
  module: 'food-booking',
  service: 'getFutureFoodBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got all future food bookings for a user',
  timestamp: '2023-11-19T18:10:42.082Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  level: 'info',
  message: 'Successfully formatted food bookings',
  timestamp: '2023-11-19T18:10:42.083Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully formatted all future food bookings for a user',
  timestamp: '2023-11-19T18:10:42.084Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully returned all future food bookings for a user',
  timestamp: '2023-11-19T18:10:42.084Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got all future food bookings for user',
  timestamp: '2023-11-19T18:10:42.084Z'
}
{
  module: 'user-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookingsForUser',
  level: 'info',
  message: 'Sorting all future bookings by dateBooked',
  timestamp: '2023-11-19T18:10:42.084Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully returned all future bookings for user',
  timestamp: '2023-11-19T18:10:42.084Z'
}
{
  module: 'verify-jwt-token',
  service: 'verifyJWT',
  userId: 'E10101',
  level: 'info',
  message: 'Access token verified',
  timestamp: '2023-11-19T18:10:45.277Z'
}
{
  module: 'check-auth',
  service: 'checkAuthStatus',
  userId: 'E10101',
  level: 'info',
  message: 'User authenticated',
  timestamp: '2023-11-19T18:10:45.277Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Getting all future food bookings for user',
  timestamp: '2023-11-19T18:10:45.277Z'
}
{
  module: 'food-booking',
  service: 'getFutureFoodBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got all future food bookings for a user',
  timestamp: '2023-11-19T18:10:45.392Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  level: 'info',
  message: 'Successfully formatted food bookings',
  timestamp: '2023-11-19T18:10:45.393Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully formatted all future food bookings for a user',
  timestamp: '2023-11-19T18:10:45.393Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully returned all future food bookings for a user',
  timestamp: '2023-11-19T18:10:45.393Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got all future food bookings for user',
  timestamp: '2023-11-19T18:10:45.394Z'
}
{
  module: 'user-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookingsForUser',
  level: 'info',
  message: 'Sorting all future bookings by dateBooked',
  timestamp: '2023-11-19T18:10:45.394Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully returned all future bookings for user',
  timestamp: '2023-11-19T18:10:45.394Z'
}
{
  module: 'verify-jwt-token',
  service: 'verifyJWT',
  userId: 'E10101',
  level: 'info',
  message: 'Access token verified',
  timestamp: '2023-11-19T18:10:55.451Z'
}
{
  module: 'check-auth',
  service: 'checkAuthStatus',
  userId: 'E10101',
  level: 'info',
  message: 'User authenticated',
  timestamp: '2023-11-19T18:10:55.451Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Getting all future desk bookings for user',
  timestamp: '2023-11-19T18:10:55.452Z'
}
{
  module: 'desk-booking',
  service: 'getFutureDeskBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got all future desk bookings for a user',
  timestamp: '2023-11-19T18:10:57.095Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  level: 'info',
  message: 'Successfully formatted desk bookings',
  timestamp: '2023-11-19T18:10:57.096Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully formatted all future desk bookings for a user',
  timestamp: '2023-11-19T18:10:57.100Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully returned all future desk bookings for a user',
  timestamp: '2023-11-19T18:10:57.100Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got all future desk bookings for user',
  timestamp: '2023-11-19T18:10:57.100Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Getting all future cab bookings for user',
  timestamp: '2023-11-19T18:10:57.100Z'
}
{
  module: 'cab-booking',
  service: 'getFutureCabBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got future cab bookings for user',
  timestamp: '2023-11-19T18:10:57.186Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  level: 'info',
  message: 'Successfully formatted cab bookings',
  timestamp: '2023-11-19T18:10:57.186Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully formatted future cab bookings for user',
  timestamp: '2023-11-19T18:10:57.186Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully returned future cab bookings for user',
  timestamp: '2023-11-19T18:10:57.186Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got all future cab bookings for user',
  timestamp: '2023-11-19T18:10:57.187Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Getting all future food bookings for user',
  timestamp: '2023-11-19T18:10:57.187Z'
}
{
  module: 'food-booking',
  service: 'getFutureFoodBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got all future food bookings for a user',
  timestamp: '2023-11-19T18:10:57.285Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  level: 'info',
  message: 'Successfully formatted food bookings',
  timestamp: '2023-11-19T18:10:57.286Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully formatted all future food bookings for a user',
  timestamp: '2023-11-19T18:10:57.286Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully returned all future food bookings for a user',
  timestamp: '2023-11-19T18:10:57.287Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully got all future food bookings for user',
  timestamp: '2023-11-19T18:10:57.288Z'
}
{
  module: 'user-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookingsForUser',
  level: 'info',
  message: 'Sorting all future bookings by dateBooked',
  timestamp: '2023-11-19T18:10:57.288Z'
}
{
  module: 'user-all-booking-controller',
  service: 'getAllFutureBookingsForUser',
  userId: 'E10101',
  level: 'info',
  message: 'Successfully returned all future bookings for user',
  timestamp: '2023-11-19T18:10:57.288Z'
}
{
  module: 'verify-jwt-token',
  service: 'verifyJWT',
  userId: 'E10101',
  level: 'info',
  message: 'Access token verified',
  timestamp: '2023-11-19T18:17:49.489Z'
}
{
  module: 'check-auth',
  service: 'checkAuthStatus',
  userId: 'E10101',
  level: 'info',
  message: 'User authenticated',
  timestamp: '2023-11-19T18:17:49.490Z'
}
{
  module: 'verify-jwt-token',
  service: 'verifyJWT',
  userId: 'E10101',
  level: 'info',
  message: 'Access token verified',
  timestamp: '2023-11-19T18:19:19.383Z'
}
{
  module: 'check-auth',
  service: 'checkAuthStatus',
  userId: 'E10101',
  level: 'info',
  message: 'User authenticated',
  timestamp: '2023-11-19T18:19:19.384Z'
}
{
  module: 'admin-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookings',
  level: 'info',
  message: 'Getting all future desk bookings',
  timestamp: '2023-11-19T18:19:19.389Z'
}
{
  module: 'desk-booking',
  service: 'getFutureDeskBookings',
  level: 'info',
  message: 'Successfully got all future desk bookings',
  timestamp: '2023-11-19T18:19:22.608Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  level: 'info',
  message: 'Successfully formatted desk bookings',
  timestamp: '2023-11-19T18:19:22.613Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  level: 'info',
  message: 'Successfully formatted all future desk bookings',
  timestamp: '2023-11-19T18:19:22.613Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  level: 'info',
  message: 'Successfully returned all future desk bookings',
  timestamp: '2023-11-19T18:19:22.613Z'
}
{
  module: 'admin-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookings',
  level: 'info',
  message: 'Successfully got all future desk bookings',
  timestamp: '2023-11-19T18:19:22.614Z'
}
{
  module: 'admin-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookings',
  level: 'info',
  message: 'Getting all future cab bookings',
  timestamp: '2023-11-19T18:19:22.614Z'
}
{
  module: 'cab-booking',
  service: 'getAllFutureCabBookings',
  level: 'info',
  message: 'Successfully got all future cab bookings',
  timestamp: '2023-11-19T18:19:22.804Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  level: 'info',
  message: 'Successfully formatted cab bookings',
  timestamp: '2023-11-19T18:19:22.806Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  level: 'info',
  message: 'Successfully formatted all future cab bookings',
  timestamp: '2023-11-19T18:19:22.806Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  level: 'info',
  message: 'Successfully returned all future cab bookings',
  timestamp: '2023-11-19T18:19:22.807Z'
}
{
  module: 'admin-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookings',
  level: 'info',
  message: 'Successfully got all future cab bookings',
  timestamp: '2023-11-19T18:19:22.807Z'
}
{
  module: 'admin-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookings',
  level: 'info',
  message: 'Getting all future food bookings',
  timestamp: '2023-11-19T18:19:22.807Z'
}
{
  module: 'food-booking',
  service: 'getAllFutureFoodBookings',
  level: 'info',
  message: 'Successfully got all future food bookings',
  timestamp: '2023-11-19T18:19:22.898Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  level: 'info',
  message: 'Successfully formatted food bookings',
  timestamp: '2023-11-19T18:19:22.899Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  level: 'info',
  message: 'Successfully formatted all future food bookings',
  timestamp: '2023-11-19T18:19:22.900Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  level: 'info',
  message: 'Successfully returned all future food bookings',
  timestamp: '2023-11-19T18:19:22.900Z'
}
{
  module: 'admin-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookings',
  level: 'info',
  message: 'Successfully got all future food bookings',
  timestamp: '2023-11-19T18:19:22.902Z'
}
{
  module: 'admin-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookings',
  level: 'info',
  message: 'Sorting all future bookings by dateBooked',
  timestamp: '2023-11-19T18:19:22.902Z'
}
{
  module: 'admin-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookings',
  level: 'info',
  message: 'Successfully returned all future bookings',
  timestamp: '2023-11-19T18:19:22.903Z'
}
{
  module: 'verify-jwt-token',
  service: 'verifyJWT',
  userId: 'E10101',
  level: 'info',
  message: 'Access token verified',
  timestamp: '2023-11-19T18:20:15.019Z'
}
{
  module: 'check-auth',
  service: 'checkAuthStatus',
  userId: 'E10101',
  level: 'info',
  message: 'User authenticated',
  timestamp: '2023-11-19T18:20:15.019Z'
}
{
  module: 'admin-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookings',
  level: 'info',
  message: 'Getting all future desk bookings',
  timestamp: '2023-11-19T18:20:15.020Z'
}
{
  module: 'desk-booking',
  service: 'getFutureDeskBookings',
  level: 'info',
  message: 'Successfully got all future desk bookings',
  timestamp: '2023-11-19T18:20:17.059Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  level: 'info',
  message: 'Successfully formatted desk bookings',
  timestamp: '2023-11-19T18:20:17.060Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  level: 'info',
  message: 'Successfully formatted all future desk bookings',
  timestamp: '2023-11-19T18:20:17.060Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  level: 'info',
  message: 'Successfully returned all future desk bookings',
  timestamp: '2023-11-19T18:20:17.060Z'
}
{
  module: 'admin-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookings',
  level: 'info',
  message: 'Successfully got all future desk bookings',
  timestamp: '2023-11-19T18:20:17.060Z'
}
{
  module: 'admin-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookings',
  level: 'info',
  message: 'Sorting all future bookings by dateBooked',
  timestamp: '2023-11-19T18:20:17.061Z'
}
{
  module: 'admin-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookings',
  level: 'info',
  message: 'Successfully returned all future bookings',
  timestamp: '2023-11-19T18:20:17.061Z'
}
{
  module: 'verify-jwt-token',
  service: 'verifyJWT',
  userId: 'E10101',
  level: 'info',
  message: 'Access token verified',
  timestamp: '2023-11-19T18:20:20.442Z'
}
{
  module: 'check-auth',
  service: 'checkAuthStatus',
  userId: 'E10101',
  level: 'info',
  message: 'User authenticated',
  timestamp: '2023-11-19T18:20:20.442Z'
}
{
  module: 'admin-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookings',
  level: 'info',
  message: 'Getting all future desk bookings',
  timestamp: '2023-11-19T18:20:20.442Z'
}
{
  module: 'desk-booking',
  service: 'getFutureDeskBookings',
  level: 'info',
  message: 'Successfully got all future desk bookings',
  timestamp: '2023-11-19T18:20:20.535Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  level: 'info',
  message: 'Successfully formatted desk bookings',
  timestamp: '2023-11-19T18:20:20.536Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  level: 'info',
  message: 'Successfully formatted all future desk bookings',
  timestamp: '2023-11-19T18:20:20.537Z'
}
{
  module: 'desk-booking',
  service: 'formatDeskBoookings',
  level: 'info',
  message: 'Successfully returned all future desk bookings',
  timestamp: '2023-11-19T18:20:20.537Z'
}
{
  module: 'admin-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookings',
  level: 'info',
  message: 'Successfully got all future desk bookings',
  timestamp: '2023-11-19T18:20:20.537Z'
}
{
  module: 'admin-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookings',
  level: 'info',
  message: 'Getting all future cab bookings',
  timestamp: '2023-11-19T18:20:20.538Z'
}
{
  module: 'cab-booking',
  service: 'getAllFutureCabBookings',
  level: 'info',
  message: 'Successfully got all future cab bookings',
  timestamp: '2023-11-19T18:20:20.625Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  level: 'info',
  message: 'Successfully formatted cab bookings',
  timestamp: '2023-11-19T18:20:20.626Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  level: 'info',
  message: 'Successfully formatted all future cab bookings',
  timestamp: '2023-11-19T18:20:20.626Z'
}
{
  module: 'cab-booking',
  service: 'formatCabBookings',
  level: 'info',
  message: 'Successfully returned all future cab bookings',
  timestamp: '2023-11-19T18:20:20.627Z'
}
{
  module: 'admin-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookings',
  level: 'info',
  message: 'Successfully got all future cab bookings',
  timestamp: '2023-11-19T18:20:20.627Z'
}
{
  module: 'admin-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookings',
  level: 'info',
  message: 'Getting all future food bookings',
  timestamp: '2023-11-19T18:20:20.627Z'
}
{
  module: 'food-booking',
  service: 'getAllFutureFoodBookings',
  level: 'info',
  message: 'Successfully got all future food bookings',
  timestamp: '2023-11-19T18:20:20.746Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  level: 'info',
  message: 'Successfully formatted food bookings',
  timestamp: '2023-11-19T18:20:20.747Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  level: 'info',
  message: 'Successfully formatted all future food bookings',
  timestamp: '2023-11-19T18:20:20.747Z'
}
{
  module: 'food-booking',
  service: 'formatFoodBookings',
  level: 'info',
  message: 'Successfully returned all future food bookings',
  timestamp: '2023-11-19T18:20:20.747Z'
}
{
  module: 'admin-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookings',
  level: 'info',
  message: 'Successfully got all future food bookings',
  timestamp: '2023-11-19T18:20:20.748Z'
}
{
  module: 'admin-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookings',
  level: 'info',
  message: 'Sorting all future bookings by dateBooked',
  timestamp: '2023-11-19T18:20:20.748Z'
}
{
  module: 'admin-all-booking-controller',
  userId: 'E10101',
  service: 'getAllFutureBookings',
  level: 'info',
  message: 'Successfully returned all future bookings',
  timestamp: '2023-11-19T18:20:20.748Z'
}
